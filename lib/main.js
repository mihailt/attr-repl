// Generated by CoffeeScript 1.6.1
(function() {
  var Particle, ParticleSystem, attrPosition, canvas, config, ctx, dist, drag, fps, gui, i, lastUpdate, mass, mouse, particle, radius, random, randomInteger, render, repulsion, rgba, run, x, y, _i;

  canvas = document.createElement('canvas');

  ctx = canvas.getContext("2d");

  canvas.width = document.width;

  canvas.height = document.height;

  document.body.appendChild(canvas);

  ctx.fillStyle = '#000';

  ctx.fillRect(0, 0, canvas.width, canvas.height);

  mouse = {
    pX: 0,
    pY: 0,
    x: 0,
    y: 0,
    down: false
  };

  canvas.addEventListener('mousemove', function(event) {
    mouse.pX = mouse.x || event.clientX;
    mouse.pY = mouse.y || event.clientY;
    mouse.x = event.clientX;
    return mouse.y = event.clientY;
  });

  canvas.addEventListener('mousedown', function(event) {
    return mouse.down = true;
  });

  canvas.addEventListener('mouseup', function(event) {
    return mouse.down = false;
  });

  config = {
    attractorFactor: 0.08,
    repulsionRadius: 100,
    saveAsImage: function() {
      return Canvas2Image.saveAsPNG(canvas);
    }
  };

  gui = new dat.GUI();

  gui.add(config, 'attractorFactor', 0, 1);

  gui.add(config, 'repulsionRadius', 10, 500);

  gui.add(config, 'saveAsImage');

  lastUpdate = Date.now();

  fps = 60;

  run = function() {
    var dt, now;
    now = Date.now();
    dt = now - lastUpdate;
    if (dt >= (1000 / fps)) {
      lastUpdate = now - dt % (1000 / fps);
      render();
    }
    return requestAnimationFrame(run);
  };

  rgba = function(r, g, b, a) {
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  };

  randomInteger = function(min, max) {
    if (max == null) {
      max = 0;
    }
    return Math.floor(Math.random() * (max + 1 - min)) + min;
  };

  random = function(min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    return Math.random() * (max - min) + min;
  };

  dist = function(x1, y1, x2, y2) {
    x2 -= x1;
    y2 -= y1;
    return Math.sqrt((x2 * x2) + (y2 * y2));
  };

  ParticleSystem = (function() {

    function ParticleSystem() {
      this.particles = [];
    }

    ParticleSystem.prototype.update = function() {
      var p, _i, _len, _ref, _results;
      _ref = this.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.update());
      }
      return _results;
    };

    ParticleSystem.prototype.draw = function() {
      var alpha, distance, nx, ny, p, p2, vx, vy, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _ref1 = this.particles;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p2 = _ref1[_j];
          distance = dist(p.position.x, p.position.y, p2.position.x, p2.position.y);
          alpha = 1 - (distance / 100);
          vx = p2.position.x - p.position.x;
          vy = p2.position.y - p.position.y;
          nx = vx * (1 / Math.sqrt(vx * vx + vy * vy));
          ny = vy * (1 / Math.sqrt(vx * vx + vy * vy));
          ctx.beginPath();
          ctx.moveTo(p.position.x, p.position.y);
          ctx.lineTo(p2.position.x, p2.position.y);
          ctx.strokeStyle = rgba(255, 255, 255, alpha);
          ctx.stroke();
          ctx.closePath();
        }
        _results.push(p.draw());
      }
      return _results;
    };

    ParticleSystem.prototype.addParticle = function(particle) {
      return this.particles.push(particle);
    };

    ParticleSystem.prototype.removeParticle = function(particle) {
      var index, value, _ref, _results;
      _ref = this.particles;
      _results = [];
      for (index in _ref) {
        value = _ref[index];
        if (value === particle) {
          _results.push(this.particles.splice(index, 1));
        }
      }
      return _results;
    };

    return ParticleSystem;

  })();

  Particle = (function() {

    function Particle(position, radius, mass, drag) {
      this.position = position;
      this.radius = radius;
      this.mass = mass;
      this.drag = drag;
      this.position = {
        x: x,
        y: y
      };
      this.forces = {
        x: 0,
        y: 0
      };
      this.prevPosition = {
        x: 0,
        y: 0
      };
    }

    Particle.prototype.update = function() {
      var fx, fy, temp, vx, vy, _ref, _ref1;
      temp = {
        x: this.position.x,
        y: this.position.y
      };
      vx = (this.position.x - ((_ref = this.prevPosition) != null ? _ref.x : void 0)) * this.drag;
      vy = (this.position.y - ((_ref1 = this.prevPosition) != null ? _ref1.y : void 0)) * this.drag;
      fx = this.forces.x / this.mass;
      fy = this.forces.y / this.mass;
      this.position.x += vx + fx;
      this.position.y += vy + fy;
      this.prevPosition = temp;
      return this.forces = {
        x: 0,
        y: 0
      };
    };

    Particle.prototype.draw = function() {
      ctx.beginPath();
      ctx.arc(this.position.x, this.position.y, this.radius * 1.2, 0, 2 * Math.PI, false);
      ctx.strokeStyle = rgba(255, 255, 255, 1);
      ctx.stroke();
      ctx.closePath();
      ctx.beginPath();
      ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI, false);
      ctx.fillStyle = rgba(255, 255, 255, 1);
      ctx.fill();
      return ctx.closePath();
    };

    return Particle;

  })();

  this.particleSystem = new ParticleSystem;

  for (i = _i = 0; _i <= 100; i = ++_i) {
    x = random(0, canvas.width);
    y = random(0, canvas.height);
    radius = random(2, 15);
    mass = radius * 2;
    drag = 0.1;
    particle = new Particle({
      x: x,
      y: y
    }, radius, mass, drag);
    particleSystem.addParticle(particle);
  }

  attrPosition = {
    x: canvas.width / 2,
    y: canvas.height / 2
  };

  repulsion = false;

  render = function() {
    var ax, ay, nx, ny, p, rx, ry, _j, _k, _len, _len1, _ref, _ref1;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    repulsion = mouse.down;
    if (repulsion) {
      _ref = particleSystem.particles;
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        p = _ref[_j];
        rx = p.position.x - attrPosition.x;
        ry = p.position.y - attrPosition.y;
        nx = rx * (1 / Math.sqrt(rx * rx + ry * ry));
        ny = ry * (1 / Math.sqrt(rx * rx + ry * ry));
        p.forces.x += nx * Math.max(0, config.repulsionRadius - Math.sqrt(rx * rx + ry * ry));
        p.forces.y += ny * Math.max(0, config.repulsionRadius - Math.sqrt(rx * rx + ry * ry));
      }
    }
    attrPosition = {
      x: mouse.x || canvas.width / 2,
      y: mouse.y || canvas.height / 2
    };
    _ref1 = particleSystem.particles;
    for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
      p = _ref1[_k];
      ax = (attrPosition.x - p.position.x) * config.attractorFactor;
      ay = (attrPosition.y - p.position.y) * config.attractorFactor;
      p.forces.x += ax;
      p.forces.y += ay;
    }
    particleSystem.update();
    return particleSystem.draw();
  };

  run();

}).call(this);
